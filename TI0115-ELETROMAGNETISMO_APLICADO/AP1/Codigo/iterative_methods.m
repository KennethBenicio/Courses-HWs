%%%%%%%%% METODO ITERATIVO %%%%%%%%%
%%%%% Parte 1
% Script para calculo da distribuição de potencial utilizando o método das diferenças finitas interativo.
%%%%% Parte 2
% Plota Campo Vetorial do campo elétrico associado à distribuição de potencial calculada. 
% Lucas de S. Abdalah - Eletromagnetismo Aplicado

%%%%% Parte 1
%% Import data from text file.
% Definicoes Gerais

% Script for importing data from the following text file:
% Auto-generated by MATLAB on 2018/11/07 12:47:10

%% Initialize variables.
filename = 'potencial.txt';
delimiter = ';';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Create output variable
potencial = cell2mat(raw);
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;

%% Utilizando o potencial sabendo o potencial Vzero da Linha que liga os pontos P1(x1,y1) e P2(x2,y2)
V = potencial;

N = length(V);

% Um vetor de tolerancia e criado como criterio de parada
tol=zeros(N); tol(:,:)=1e-6;  

% Inicia o Metodo Iterativo, fazendo o calculo dos pontos médios.
for a=1:1e5 % Numero bem elevado de iteracoes
    verifica=V; % Guarda a Matriz V da iteracao anterior para conferencia
    for i=2:(N-1) %Percorre as linhas
        for k=2:(N-1) % Percorre as colunas
            if V(i,k) ~= 4
                V(i,k) = (V(i,k-1) + V(i,k+1) + V(i-1,k) + V(i+1,k))/4; % Computa o ponto medio dos pontos desconhecidos
            end
        end
    end
    
    if V-verifica<tol % Ponto de verificacao quanto a tolerancia
        disp('Numero de Iteracoes:'); % Atingiu a tolerancia
        disp(a) % Mostra o numero de iteracoes para atingir a tolerancia
        break;
    else
        continue; % Ainda nao atingiu
    end
end

disp('Pressione qualquer tecla para ver os graficos.');

pause

%%%%% Parte 2
X = linspace(0,10,N); Y = linspace(0,8,N); % Cria os pontos da geometria

figure(1)
contour(X,Y,V,1000)  % Distribuicao de potencial associada ao campo escalar
colorbar % Introduz a barra de cores pra mapear as curvas equipotencias. 
set(gca,'YDir','reverse')

title({'Problema 1'; 'Distribuicao de Potencial'}); % Titulo do Grafico
xlabel('x (cm)'); % Titulo do eixo x 
ylabel('y (cm)'); % Titulo do eixo y

[Ex, Ey] = gradient(V); % Calculo do Gradiente, associado ao campo escalar

figure(2)
contour(X,Y,V,10) % Determina as linhas equipotenciais associadas ao campo escalar e plota
hold on
quiver(X,Y,-Ex,-Ey) % Plota os vetores (EX,EY) nos pontos (X,Y) no espaço bidimensional
colorbar
set(gca,'YDir','reverse')

title({'Problema 1'; 'Gradiente e Linhas Equipotenciais'}); % Titulo do Grafico
xlabel('x (cm)'); % Titulo do eixo x 
ylabel('y (cm)'); % Titulo do eixo y


figure(3)
contour(X,Y,V,10) % Determina as linhas equipotenciais associadas ao campo escalar e plota
hold on
quiver(X,Y,-Ex./sqrt(Ex.^2 + Ey.^2),-Ey./sqrt(Ex.^2 + Ey.^2)) % plota os vetores (EX,EY) nos pontos (X,Y) no espaço bidimensional 
colorbar

set(gca,'YDir','reverse')

title({'Problema 1'; 'Gradiente e Linhas Equipotenciais (Normalizado)'}); % Titulo do Grafico
xlabel('x (cm)'); % Titulo do eixo x 
ylabel('y (cm)'); % Titulo do eixo y

disp('Aperte enter para fechar tudo.')
pause

clc; close all; clear all